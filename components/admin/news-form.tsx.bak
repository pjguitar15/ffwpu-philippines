"use client"

import { useEffect, useMemo, useRef, useState } from 'react'
import { Button } from '@/components/ui/button'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { useToast } from '@/hooks/use-toast'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { toParagraphHtml, slugify, htmlToText } from '@/lib/text'
import RichTextEditor from '@/components/admin/rich-text-editor'
import {
  Calendar,
  ImageIcon,
  ImagePlus,
  Tag,
  Type,
  User,
  FileText,
  Upload,
  RefreshCcw,
  Trash2,
  CheckCircle,
} from 'lucide-react'
import { Progress } from '@/components/ui/progress'

type Testimonial = {
  name: string
  role?: string
  avatar?: string
  quote: string
}

type NewsFormValues = {
  _id?: string
  title: string
  subtitle: string
  author: string
  date: string
  image: string
  gallery: string[]
  tags: string
  status: 'published' | 'draft'
  content: string
  slug?: string
  testimonials: Testimonial[]
}

const MAX_GALLERY_ITEMS = 12

export function NewsForm({
  open,
  onOpenChange,
  initial,
  onSaved,
}: {
  open: boolean
  onOpenChange: (v: boolean) => void
  initial?: Partial<NewsFormValues>
  onSaved?: () => void
}) {
  const [values, setValues] = useState<NewsFormValues>({
    title: '',
    subtitle: '',
    author: '',
    date: new Date().toISOString().slice(0, 10),
    image: '',
    gallery: [],
    tags: '',
    status: 'published',
    content: '',
    testimonials: [],
  })
  const [saving, setSaving] = useState(false)
  const [uploading, setUploading] = useState(false)
  const [uploadError, setUploadError] = useState<string | null>(null)
  const [uploadPct, setUploadPct] = useState(0)
  const [isDragging, setIsDragging] = useState(false)
  const [avatarUploading, setAvatarUploading] = useState<
    Record<number, { uploading: boolean; pct: number; error: string | null }>
  >({})
  const avatarInputsRef = useRef<Record<number, HTMLInputElement | null>>({})

  const fileInputRef = useRef<HTMLInputElement | null>(null)
  const galleryInputRef = useRef<HTMLInputElement | null>(null)
  const [galleryUploading, setGalleryUploading] = useState<Record<number, {
    uploading: boolean
    pct: number
    error: string | null
  }>>({})
  const isEdit = Boolean(initial && (initial as any)._id)

  async function uploadGalleryImage(file: File) {
    const MAX_BYTES = 10 * 1024 * 1024 // 10MB
    if (!file.type.startsWith('image/')) {
      toast({
        title: 'Invalid file type',
        description: 'Please select an image file',
        variant: 'destructive',
      })
      return
    }
    if (file.size > MAX_BYTES) {
      toast({
        title: 'File too large',
        description: 'Maximum file size is 10MB',
        variant: 'destructive',
      })
      return
    }

    const idx = values.gallery?.length || 0
    setGalleryUploading(prev => ({ ...prev, [idx]: { uploading: true, pct: 0, error: null }}))

    try {
      const fd = new FormData()
      fd.append('file', file)
      
      const xhr = new XMLHttpRequest()
      xhr.open('POST', '/api/cloudinary-upload')
      
      xhr.upload.onprogress = (e) => {
        if (e.lengthComputable) {
          const pct = (e.loaded / e.total) * 100
          setGalleryUploading(prev => ({ 
            ...prev, 
            [idx]: { uploading: true, pct, error: null }
          }))
        }
      }

      await new Promise<void>((resolve, reject) => {
        xhr.onload = () => {
          try {
            const data = JSON.parse(xhr.responseText || '{}')
            if (xhr.status >= 200 && xhr.status < 300 && data?.url) {
              setValues(prev => ({
                ...prev,
                gallery: [...(prev.gallery || []), data.url]
              }))
              setGalleryUploading(prev => ({ 
                ...prev, 
                [idx]: { uploading: false, pct: 100, error: null }
              }))
              resolve()
            } else {
              reject(new Error(data?.error || 'Upload failed'))
            }
          } catch {
            reject(new Error('Upload failed'))
          }
        }

        xhr.onerror = () => reject(new Error('Network error during upload'))
        xhr.send(fd)
      })
    } catch (err: any) {
      console.error(err)
      setGalleryUploading(prev => ({
        ...prev,
        [idx]: { uploading: false, pct: 0, error: err?.message || 'Upload failed' }
      }))
      toast({
        title: 'Upload failed',
        description: err?.message || 'Please try again',
        variant: 'destructive',
      })
    }
  }
  const { toast } = useToast()

  useEffect(() => {
    if (open) {
      setValues((v) => ({
        ...v,
        title: initial?.title || '',
        subtitle: (initial?.subtitle as string) || '',
        author: initial?.author || '',
        date:
          (initial?.date as string) || new Date().toISOString().slice(0, 10),
        image: (initial as any)?.image || '',
        gallery: Array.isArray((initial as any)?.gallery)
          ? ((initial as any).gallery as Array<unknown>)
              .map((url) => (typeof url === 'string' ? url.trim() : ''))
              .filter(Boolean)
              .slice(0, MAX_GALLERY_ITEMS)
          : [],
        tags: Array.isArray((initial as any)?.tags)
          ? ((initial as any)?.tags || []).join(', ')
          : (initial?.tags as any) || '',
        status: (initial?.status as any) || 'published',
        content: (initial?.content as any) || '',
        slug: (initial as any)?.slug,
        _id: (initial as any)?._id,
        testimonials: Array.isArray((initial as any)?.testimonials)
          ? (initial as any).testimonials
          : [],
      }))
    }
  }, [open])

  const tagList = useMemo(
    () =>
      (values.tags || '')
        .split(',')
        .map((t) => t.trim())
        .filter(Boolean),
    [values.tags],
  )

  const canSubmit = useMemo(() => {
    const titleOk = values.title.trim().length > 0
    const authorOk = values.author.trim().length > 0
    const dateOk = (values.date || '').trim().length > 0
    const imageOk = values.image.trim().length > 0
    const contentOk = htmlToText(values.content).trim().length > 0
    return titleOk && authorOk && dateOk && imageOk && contentOk
  }, [values.title, values.author, values.date, values.image, values.content])

  async function uploadFile(file: File) {
    const MAX_BYTES = 10 * 1024 * 1024 // 10MB default to match server route
    if (!file.type.startsWith('image/')) {
      setUploadError('Please select an image file')
      return
    }
    if (file.size > MAX_BYTES) {
      setUploadError('File too large (max 10MB)')
      return
    }
    setUploadError(null)
    setUploading(true)
    setUploadPct(0)
    try {
      await new Promise<void>((resolve, reject) => {
        const fd = new FormData()
        fd.append('file', file)
        const xhr = new XMLHttpRequest()
        xhr.open('POST', '/api/cloudinary-upload')
        xhr.upload.onprogress = (e) => {
          if (e.lengthComputable) {
            setUploadPct((e.loaded / e.total) * 100)
          }
        }
        xhr.onload = () => {
          try {
            const data = JSON.parse(xhr.responseText || '{}')
            if (xhr.status >= 200 && xhr.status < 300) {
              setValues((v) => ({ ...v, image: data.url }))
              setUploadPct(100)
              resolve()
            } else {
              reject(new Error(data?.error || 'Upload failed'))
            }
          } catch (e) {
            reject(new Error('Upload failed'))
          }
        }
        xhr.onerror = () => reject(new Error('Network error during upload'))
        xhr.send(fd)
      })
    } catch (err: any) {
      console.error(err)
      setUploadError(err?.message || 'Upload failed')
    } finally {
      setUploading(false)
    }
  }

  async function uploadAvatar(idx: number, file: File) {
    const MAX_BYTES = 10 * 1024 * 1024 // 10MB
    if (!file.type.startsWith('image/')) {
      setAvatarUploading((s) => ({
        ...s,
        [idx]: {
          uploading: false,
          pct: 0,
          error: 'Please select an image file',
        },
      }))
      return
    }
    if (file.size > MAX_BYTES) {
      setAvatarUploading((s) => ({
        ...s,
        [idx]: { uploading: false, pct: 0, error: 'File too large (max 10MB)' },
      }))
      return
    }

    setAvatarUploading((s) => ({
      ...s,
      [idx]: { uploading: true, pct: 0, error: null },
    }))

    try {
      await new Promise<void>((resolve, reject) => {
        const fd = new FormData()
        fd.append('file', file)
        const xhr = new XMLHttpRequest()
        xhr.open('POST', '/api/cloudinary-upload')

        xhr.upload.onprogress = (e) => {
          if (e.lengthComputable) {
            const pct = (e.loaded / e.total) * 100
            setAvatarUploading((s) => ({
              ...s,
              [idx]: { uploading: true, pct, error: null },
            }))
          }
        }

        xhr.onload = () => {
          try {
            const data = JSON.parse(xhr.responseText || '{}')
            if (xhr.status >= 200 && xhr.status < 300 && data?.url) {
              setValues((v) => {
                const arr = [...(v.testimonials || [])]
                if (!arr[idx]) return v
                arr[idx] = { ...arr[idx], avatar: data.url }
                return { ...v, testimonials: arr }
              })
              setAvatarUploading((s) => ({
                ...s,
                [idx]: { uploading: false, pct: 100, error: null },
              }))
              resolve()
            } else {
              reject(new Error(data?.error || 'Upload failed'))
            }
          } catch {
            reject(new Error('Upload failed'))
          }
        }

        xhr.onerror = () => reject(new Error('Network error during upload'))
        xhr.send(fd)
      })
    } catch (err: any) {
      setAvatarUploading((s) => ({
        ...s,
        [idx]: {
          uploading: false,
          pct: 0,
          error: err?.message || 'Upload failed',
        },
      }))
    }
  }

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setSaving(true)
    try {
      const payload = {
        title: values.title.trim(),
        subtitle: values.subtitle.trim(),
        author: values.author.trim(),
        date: values.date,
        image: values.image.trim(),
        gallery: (values.gallery || [])
          .map((url) => url.trim())
          .filter(Boolean)
          .slice(0, MAX_GALLERY_ITEMS),
        tags: (values.tags || '')
          .split(',')
          .map((t) => t.trim())
          .filter(Boolean),
        status: values.status,
        content: toParagraphHtml(values.content),
        slug: values.slug || slugify(values.title),
        testimonials: (values.testimonials || []).slice(0, 3),
      }
      const isEdit = Boolean((values as any)._id || values.slug)
      const res = await fetch(
        isEdit
          ? `/api/news/${(values as any)._id || values.slug}`
          : '/api/news',
        {
          method: isEdit ? 'PUT' : 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        },
      )
      if (!res.ok) throw new Error(await res.text())
      onSaved?.()
      onOpenChange(false)
    } catch (err) {
      console.error('Save failed:', err)
      toast({
        title: 'Failed to save news',
        description: 'Please check the console for details and try again.',
        variant: 'destructive',
      })
    } finally {
      setSaving(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="w-[95vw] sm:max-w-3xl md:max-w-4xl h-[90vh] sm:h-[85vh] p-0 overflow-hidden">
        <div className="flex flex-col h-full min-h-0">
          <div className="mb-5">
            <div className="h-1 w-full bg-indigo-500" />
            <div className="px-6 pt-6 pb-4 bg-gradient-to-r from-sky-50 to-indigo-50 dark:from-sky-950/20 dark:to-indigo-950/20 border-b">
              <DialogHeader>
                <DialogTitle className="text-foreground">
                  {isEdit ? 'Edit News' : 'Create News'}
                </DialogTitle>
              </DialogHeader>
            </div>
          </div>
          {/* Themed header: thin indigo bar + subtle sky→indigo gradient */}
          <div className='mb-5'>
            <div className='h-1 w-full bg-indigo-500' />
            <div className='px-6 pt-6 pb-4 bg-gradient-to-r from-sky-50 to-indigo-50 dark:from-sky-950/20 dark:to-indigo-950/20 border-b'>
              <DialogHeader>
                <DialogTitle className='text-foreground'>
                  {isEdit ? 'Edit News' : 'Create News'}
                </DialogTitle>
              </DialogHeader>
            </div>
          </div>

          <form
            onSubmit={handleSubmit}
            className='flex-1 flex flex-col min-h-0'
          >
            {/* Scrollable content area; bottom padding ensures content not hidden behind footer */}
            <div className='flex-1 min-h-0 overflow-y-auto px-6 pb-6 pr-7'>
              <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>
                {/* Row 1: Title spans 2 columns | Author */}
                <div className='md:col-span-2'>
                  <label className='text-sm font-medium flex items-center gap-2 mb-1.5'>
                    <Type className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                    Title
                  </label>
                  <Input
                    placeholder='Enter article title'
                    value={values.title}
                    onChange={(e) =>
                      setValues({ ...values, title: e.target.value })
                    }
                    required
                    className='bg-white dark:bg-slate-950 border border-slate-300 dark:border-slate-800 focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-0'
                  />
                </div>
                <div>
                  <label className='text-sm font-medium flex items-center gap-2 mb-1.5'>
                    <User className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                    Author
                  </label>
                  <Input
                    placeholder='Author name'
                    value={values.author}
                    onChange={(e) =>
                      setValues({ ...values, author: e.target.value })
                    }
                    required
                    className='bg-white dark:bg-slate-950 border border-slate-300 dark:border-slate-800 focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-0'
                  />
                </div>
                <div className='md:col-span-3'>
                  <label className='text-sm font-medium flex items-center gap-2 mb-1.5'>
                    <FileText className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                    Subtitle
                  </label>
                  <Input
                    placeholder='Add a short subtitle'
                    value={values.subtitle}
                    onChange={(e) =>
                      setValues({ ...values, subtitle: e.target.value })
                    }
                    className='bg-white dark:bg-slate-950 border border-slate-300 dark:border-slate-800 focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-0'
                  />
                  <p className='text-xs text-muted-foreground mt-1'>
                    Appears beneath the headline on the public page.
                  </p>
                </div>

                {/* Row 2: Date | Status | Tags */}
                <div>
                  <label className='text-sm font-medium flex items-center gap-2 mb-1.5'>
                    <Calendar className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                    Date
                  </label>
                  <Input
                    type='date'
                    placeholder='MM/DD/YYYY'
                    value={values.date}
                    onChange={(e) =>
                      setValues({ ...values, date: e.target.value })
                    }
                    required
                    className='bg-white dark:bg-slate-950 border border-slate-300 dark:border-slate-800 focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-0'
                  />
                </div>
                <div>
                  <label className='text-sm font-medium flex items-center gap-2 mb-1.5'>
                    <CheckCircle className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                    Status
                  </label>
                  <Select
                    value={values.status}
                    onValueChange={(value: 'published' | 'draft') =>
                      setValues({ ...values, status: value })
                    }
                  >
                    <SelectTrigger className='bg-white dark:bg-slate-950 border border-slate-300 dark:border-slate-800 focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-0'>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value='published'>Published</SelectItem>
                      <SelectItem value='draft'>Draft</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className='text-sm font-medium flex items-center gap-2 mb-1.5'>
                    <Tag className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                    Tags (comma separated)
                  </label>
                  <Input
                    placeholder='family, community, service'
                    value={values.tags}
                    onChange={(e) =>
                      setValues({ ...values, tags: e.target.value })
                    }
                    className='bg-white dark:bg-slate-950 border border-slate-300 dark:border-slate-800 focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-0'
                  />
                  {tagList.length > 0 && (
                    <div className='mt-2 flex gap-2 flex-wrap'>
                      {tagList.map((t) => (
                        <Badge
                          key={t}
                          variant='secondary'
                          className='capitalize text-[11px] rounded-full border border-sky-200 bg-sky-50 text-sky-700 px-2 py-0.5'
                        >
                          {t}
                        </Badge>
                      ))}
                    </div>
                  )}
                </div>

                {/* Row 3: Main image upload */}
                <div className='md:col-span-3'>
                  <label className='text-sm font-medium flex items-center gap-2 mb-1.5'>
                    <ImageIcon className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                    Main Image
                  </label>
                  {!values.image ? (
                    <div
                      className={
                        'relative rounded-xl border-2 border-dashed transition-colors p-6 text-center select-none ' +
                        (isDragging
                          ? 'border-sky-500 bg-sky-50/50 dark:bg-sky-950/20'
                          : 'border-slate-300 dark:border-slate-800 bg-white dark:bg-slate-950 hover:border-sky-400')
                      }
                      onDragOver={(e) => {
                        e.preventDefault()
                        setIsDragging(true)
                      }}
                      onDragLeave={() => setIsDragging(false)}
                      onDrop={async (e) => {
                        e.preventDefault()
                        setIsDragging(false)
                        const f = e.dataTransfer.files?.[0]
                        if (f) await uploadFile(f)
                      }}
                    >
                      <div className='flex flex-col items-center gap-2'>
                        <div className='h-12 w-12 rounded-full bg-sky-100 text-sky-700 flex items-center justify-center dark:bg-sky-900/40 dark:text-sky-200'>
                          <Upload className='h-6 w-6' />
                        </div>
                        <div className='text-sm font-medium'>
                          Drag & drop an image
                        </div>
                        <div className='text-xs text-muted-foreground'>or</div>
                        <Button
                          type='button'
                          variant='secondary'
                          size='sm'
                          className='cursor-pointer'
                          onClick={() => fileInputRef.current?.click()}
                        >
                          Choose image
                        </Button>
                        <input
                          ref={fileInputRef}
                          type='file'
                          accept='image/*'
                          className='hidden'
                          onChange={async (e) => {
                            const f = e.target.files?.[0]
                            if (f) await uploadFile(f)
                          }}
                        />
                        {uploading && (
                          <div className='mt-3 w-full max-w-xs mx-auto'>
                            <Progress value={uploadPct} />
                            <p className='text-xs text-muted-foreground mt-1'>
                              Uploading… {Math.round(uploadPct)}%
                            </p>
                          </div>
                        )}
                        {uploadError && (
                          <p className='text-xs text-rose-600 mt-2'>
                            {uploadError}
                          </p>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div className='relative mt-2 overflow-hidden rounded-xl border bg-white dark:bg-slate-950'>
                      {/* eslint-disable-next-line @next/next/no-img-element */}
                      <img
                        src={values.image}
                        alt='Uploaded image'
                        className='w-full max-h-56 object-cover'
                      />
                      <div className='absolute top-2 right-2 flex gap-2'>
                        <Button
                          type='button'
                          size='sm'
                          variant='secondary'
                          className='cursor-pointer'
                          onClick={() => fileInputRef.current?.click()}
                          title='Replace image'
                        >
                          <RefreshCcw className='h-4 w-4' />
                        </Button>
                        <Button
                          type='button'
                          size='sm'
                          variant='destructive'
                          className='cursor-pointer'
                          onClick={() =>
                            setValues((v) => ({ ...v, image: '' }))
                          }
                          title='Remove image'
                        >
                          <Trash2 className='h-4 w-4' />
                        </Button>
                      </div>
                      <input
                        ref={fileInputRef}
                        type='file'
                        accept='image/*'
                        className='hidden'
                        onChange={async (e) => {
                          const f = e.target.files?.[0]
                          if (f) await uploadFile(f)
                        }}
                      />
                      {uploading && (
                        <div className='absolute inset-0 bg-black/40 backdrop-blur-sm flex flex-col items-center justify-center gap-2'>
                          <Progress className='w-2/3' value={uploadPct} />
                          <div className='text-xs text-white'>
                            Uploading… {Math.round(uploadPct)}%
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>

                </div>
                </div>

                {/* Gallery Section */}
                <div className='md:col-span-3 mt-6'>
                  <div className='flex items-center justify-between mb-1.5'>
                    <label className='text-sm font-medium flex items-center gap-2'>
                      <ImageIcon className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                      Gallery Images
                    </label>
                    <Button
                      type='button'
                      size='sm'
                      variant='secondary'
                      className='cursor-pointer'
                      onClick={() => galleryInputRef.current?.click()}
                      disabled={(values.gallery?.length || 0) >= MAX_GALLERY_ITEMS}
                    >
                      Add image
                    </Button>
                    <input
                      ref={galleryInputRef}
                      type='file'
                      accept='image/*'
                      multiple
                      className='hidden'
                      onChange={async (e) => {
                        const files = Array.from(e.target.files || [])
                        for (const file of files) {
                          if ((values.gallery?.length || 0) >= MAX_GALLERY_ITEMS) break
                          await uploadGalleryImage(file)
                        }
                        if (galleryInputRef.current) galleryInputRef.current.value = ''
                      }}
                    />
                  </div>

                  {(values.gallery?.length || 0) === 0 ? (
                    <div
                      className={'relative rounded-xl border-2 border-dashed transition-colors p-6 text-center select-none ' +
                        (isDragging
                          ? 'border-sky-500 bg-sky-50/50 dark:bg-sky-950/20'
                          : 'border-slate-300 dark:border-slate-800 bg-white dark:bg-slate-950 hover:border-sky-400')
                      }
                      onDragOver={(e) => {
                        e.preventDefault()
                        setIsDragging(true)
                      }}
                      onDragLeave={() => setIsDragging(false)}
                      onDrop={async (e) => {
                        e.preventDefault()
                        setIsDragging(false)
                        const files = Array.from(e.dataTransfer.files || [])
                        for (const file of files) {
                          if ((values.gallery?.length || 0) >= MAX_GALLERY_ITEMS) break
                          await uploadGalleryImage(file)
                        }
                      }}
                    >
                      <div className='flex flex-col items-center gap-2'>
                        <div className='h-12 w-12 rounded-full bg-sky-100 text-sky-700 flex items-center justify-center dark:bg-sky-900/40 dark:text-sky-200'>
                          <ImagePlus className='h-6 w-6' />
                        </div>
                        <div className='text-sm font-medium'>
                          Drag & drop images here or click Add image
                        </div>
                        <div className='text-sm text-muted-foreground'>
                          Up to {MAX_GALLERY_ITEMS} images, max 10MB each
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className='grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4 mt-3'>
                      {values.gallery.map((url, idx) => (
                        <div
                          key={idx}
                          className='relative group aspect-square rounded-lg overflow-hidden border bg-white dark:bg-slate-950'
                        >
                          <img
                            src={url}
                            alt={`Gallery ${idx + 1}`}
                            className='w-full h-full object-cover'
                          />
                          <div className='absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center gap-2'>
                            <Button
                              type='button'
                              size='sm'
                              variant='destructive'
                              className='cursor-pointer'
                              onClick={() => {
                                setValues(prev => ({
                                  ...prev,
                                  gallery: prev.gallery?.filter((_, i) => i !== idx),
                                }))
                              }}
                            >
                              <Trash2 className='h-4 w-4' />
                            </Button>
                          </div>
                        </div>
                      ))}

                      {Object.entries(galleryUploading).map(([idx, status]) => (
                        status.uploading && (
                          <div key={idx} className='aspect-square rounded-lg border bg-white dark:bg-slate-950 flex flex-col items-center justify-center gap-2 p-4'>
                            <Progress value={status.pct} />
                            <p className='text-xs text-muted-foreground'>
                              Uploading... {Math.round(status.pct)}%
                            </p>
                          </div>
                        )
                      ))}

                      {(values.gallery?.length || 0) < MAX_GALLERY_ITEMS && (
                        <button
                          type='button'
                          onClick={() => galleryInputRef.current?.click()}
                          className='aspect-square rounded-lg border-2 border-dashed border-slate-300 dark:border-slate-800 hover:border-sky-400 transition-colors flex flex-col items-center justify-center gap-2 bg-white dark:bg-slate-950'
                        >
                          <ImagePlus className='h-6 w-6 text-sky-600 dark:text-sky-300' />
                          <span className='text-sm text-muted-foreground'>Add image</span>
                        </button>
                      )}
                    </div>
                  )}
                </div>

                {/* Content editor */}
                <div className='md:col-span-3'>
                  <label className='text-sm font-medium flex items-center gap-2 mb-1.5'>
                    <FileText className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                    Content
                  </label>
                  <div className='mt-1 rounded-md border border-slate-300 dark:border-slate-800 bg-white dark:bg-slate-950'>
                    <RichTextEditor
                      value={values.content}
                      onChange={(html) =>
                        setValues({ ...values, content: html })
                      }
                      placeholder='Write the article…'
                    />
                  </div>
                  <p className='text-xs text-muted-foreground mt-2'>
                    Use the toolbar to format text (bold, italic, underline,
                    lists, headings, links).
                  </p>
                </div>
                <div className='md:col-span-3'>
                  <label className='text-sm font-medium flex items-center gap-2 mb-1.5'>
                    <ImagePlus className='h-4 w-4 text-sky-600 dark:text-sky-300' />{' '}
                    Gallery images
                  </label>
                  <p className='text-xs text-muted-foreground'>
                    Add up to 12 image URLs to show above the testimonies
                    section.
                  </p>
                  {values.gallery.length === 0 && (
                    <p className='text-xs text-muted-foreground mt-2'>
                      No gallery items yet. Click below to add one.
                    </p>
                  )}
                  {values.gallery.length > 0 && (
                    <div className='space-y-3 mt-2'>
                      {values.gallery.map((url, idx) => (
                        <div
                          key={idx}
                          className='flex flex-col sm:flex-row sm:items-center gap-2'
                        >
                          <Input
                            value={url}
                            onChange={(e) =>
                              setValues((prev) => {
                                const next = [...(prev.gallery || [])]
                                next[idx] = e.target.value
                                return { ...prev, gallery: next }
                              })
                            }
                            placeholder='https://example.com/image.jpg'
                            className='flex-1 bg-white dark:bg-slate-950 border border-slate-300 dark:border-slate-800 focus-visible:ring-2 focus-visible:ring-sky-500 focus-visible:ring-offset-0'
                          />
                          <Button
                            type='button'
                            variant='ghost'
                            size='sm'
                            className='text-rose-600 hover:text-rose-700 cursor-pointer'
                            onClick={() =>
                              setValues((prev) => ({
                                ...prev,
                                gallery: (prev.gallery || []).filter(
                                  (_, i) => i !== idx,
                                ),
                              }))
                            }
                          >
                            Remove
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}
                  <Button
                    type='button'
                    variant='secondary'
                    size='sm'
                    className='mt-3 cursor-pointer'
                    onClick={() =>
                      setValues((prev) => ({
                        ...prev,
                        gallery:
                          (prev.gallery || []).length >= MAX_GALLERY_ITEMS
                            ? prev.gallery
                            : [...(prev.gallery || []), ''],
                      }))
                    }
                    disabled={
                      (values.gallery || []).length >= MAX_GALLERY_ITEMS
                    }
                  >
                    Add image
                  </Button>
                </div>
                {/* Testimonials editor */}
                <div className='md:col-span-3'>
                  <div className='flex items-center justify-between mb-1.5'>
                    <label className='text-sm font-medium flex items-center gap-2'>
                      <svg
                        className='h-4 w-4 text-sky-600 dark:text-sky-300'
                        viewBox='0 0 24 24'
                        fill='none'
                      >
                        <path
                          d='M7 7h10M7 12h10M7 17h6'
                          stroke='currentColor'
                          strokeWidth='2'
                          strokeLinecap='round'
                        />
                      </svg>
                      Testimonials (max 3)
                    </label>
                    <Button
                      type='button'
                      size='sm'
                      variant='secondary'
                      className='cursor-pointer'
                      onClick={() =>
                        setValues((v) => ({
                          ...v,
                          testimonials:
                            (v.testimonials || []).length >= 3
                              ? v.testimonials
                              : [
                                  ...(v.testimonials || []),
                                  { name: '', role: '', avatar: '', quote: '' },
                                ],
                        }))
                      }
                      disabled={(values.testimonials || []).length >= 3}
                    >
                      Add testimonial
                    </Button>
                  </div>

                  {(values.testimonials || []).length === 0 && (
                    <p className='text-xs text-muted-foreground mb-2'>
                      Optional. Add up to three short reflections with name,
                      role, and quote.
                    </p>
                  )}

                  <div className='space-y-4'>
                    {(values.testimonials || []).map((t, idx) => (
                      <div
                        key={idx}
                        className='rounded-lg border p-3 bg-white dark:bg-slate-950 border-slate-300 dark:border-slate-800'
                      >
                        <div className='grid grid-cols-1 md:grid-cols-6 gap-3'>
                          <div className='md:col-span-2'>
                            <label className='text-xs font-medium'>Name</label>
                            <Input
                              value={t.name}
                              onChange={(e) => {
                                const name = e.target.value
                                setValues((v) => {
                                  const arr = [...(v.testimonials || [])]
                                  arr[idx] = { ...arr[idx], name }
                                  return { ...v, testimonials: arr }
                                })
                              }}
                              placeholder='Jane Doe'
                            />
                          </div>
                          <div className='md:col-span-2'>
                            <label className='text-xs font-medium'>
                              Role (optional)
                            </label>
                            <Input
                              value={t.role || ''}
                              onChange={(e) => {
                                const role = e.target.value
                                setValues((v) => {
                                  const arr = [...(v.testimonials || [])]
                                  arr[idx] = { ...arr[idx], role }
                                  return { ...v, testimonials: arr }
                                })
                              }}
                              placeholder='Youth Leader'
                            />
                          </div>
                          {/* Avatar uploader (replaces the old text input) */}
                          <div className='md:col-span-2'>
                            <label className='text-xs font-medium'>
                              Avatar (optional)
                            </label>
                            <div className='flex items-center gap-3'>
                              {/* Preview */}
                              <div className='h-12 w-12 rounded-full overflow-hidden bg-slate-200'>
                                {t.avatar ? (
                                  // eslint-disable-next-line @next/next/no-img-element
                                  <img
                                    src={t.avatar}
                                    alt='avatar'
                                    className='h-full w-full object-cover'
                                  />
                                ) : (
                                  <div className='h-full w-full grid place-items-center text-slate-500 text-[10px]'>
                                    No image
                                  </div>
                                )}
                              </div>

                              {/* Actions */}
                              <div className='flex items-center gap-2'>
                                <Button
                                  type='button'
                                  size='sm'
                                  variant='secondary'
                                  className='cursor-pointer'
                                  onClick={() =>
                                    avatarInputsRef.current[idx]?.click()
                                  }
                                >
                                  {t.avatar
                                    ? 'Replace avatar'
                                    : 'Upload avatar'}
                                </Button>

                                {t.avatar && (
                                  <Button
                                    type='button'
                                    size='sm'
                                    variant='ghost'
                                    className='cursor-pointer text-rose-600 hover:text-rose-700'
                                    onClick={() =>
                                      setValues((v) => {
                                        const arr = [...(v.testimonials || [])]
                                        arr[idx] = { ...arr[idx], avatar: '' }
                                        return { ...v, testimonials: arr }
                                      })
                                    }
                                  >
                                    Remove
                                  </Button>
                                )}
                              </div>

                              {/* Hidden file input */}
                              <input
                                ref={(el: any) =>
                                  (avatarInputsRef.current[idx] = el)
                                }
                                type='file'
                                accept='image/*'
                                className='hidden'
                                onChange={async (e) => {
                                  const input =
                                    e.currentTarget as HTMLInputElement
                                  const f = input.files?.[0]
                                  if (f) await uploadAvatar(idx, f)
                                  // reset via ref (works even if React nullifies the event)
                                  const refEl = avatarInputsRef.current[idx]
                                  if (refEl) refEl.value = ''
                                }}
                              />
                            </div>

                            {/* Progress / Error */}
                            {avatarUploading[idx]?.uploading && (
                              <div className='mt-2 w-48'>
                                <Progress
                                  value={avatarUploading[idx].pct || 0}
                                />
                                <p className='text-xs text-muted-foreground mt-1'>
                                  Uploading…{' '}
                                  {Math.round(avatarUploading[idx].pct || 0)}%
                                </p>
                              </div>
                            )}
                            {avatarUploading[idx]?.error && (
                              <p className='text-xs text-rose-600 mt-1'>
                                {avatarUploading[idx].error}
                              </p>
                            )}
                          </div>

                          <div className='md:col-span-5'>
                            <label className='text-xs font-medium'>Quote</label>
                            <Textarea
                              value={t.quote}
                              onChange={(e) => {
                                const quote = e.target.value
                                setValues((v) => {
                                  const arr = [...(v.testimonials || [])]
                                  arr[idx] = { ...arr[idx], quote }
                                  return { ...v, testimonials: arr }
                                })
                              }}
                              placeholder='Their short reflection…'
                              rows={3}
                            />
                          </div>
                          <div className='md:col-span-1 flex items-end'>
                            <Button
                              type='button'
                              variant='destructive'
                              className='w-full cursor-pointer'
                              onClick={() =>
                                setValues((v) => ({
                                  ...v,
                                  testimonials: (v.testimonials || []).filter(
                                    (_, i) => i !== idx,
                                  ),
                                }))
                              }
                            >
                              Remove
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Footer anchored at the bottom via flex layout */}
            <div className='flex-shrink-0 w-full px-6 py-3 bg-white dark:bg-slate-900 border-t flex justify-end gap-2'>
              <Button
                type='button'
                variant='secondary'
                onClick={() => onOpenChange(false)}
                disabled={saving}
                className='cursor-pointer'
              >
                Cancel
              </Button>
              <Button
                type='submit'
                disabled={saving || uploading || !canSubmit}
                aria-disabled={saving || uploading || !canSubmit}
                className='cursor-pointer bg-indigo-600 hover:bg-indigo-700'
              >
                {saving
                  ? 'Saving…'
                  : uploading
                  ? 'Uploading…'
                  : isEdit
                  ? 'Update'
                  : 'Create'}
              </Button>
            </div>
          </form>
        </div>
      </DialogContent>
    </Dialog>
  );
}

export default NewsForm;

